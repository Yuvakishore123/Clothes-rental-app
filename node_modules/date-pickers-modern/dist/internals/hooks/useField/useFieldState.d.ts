import { FieldSection, UseFieldForwardedProps, UseFieldInternalProps, UseFieldParams, UseFieldState, FieldSelectedSectionsIndexes, FieldSelectedSections, FieldBoundaries } from './useField.types';
interface UpdateSectionValueParams<TDate, TSection extends FieldSection> {
    activeSection: TSection;
    setSectionValueOnDate: (activeDate: TDate, boundaries: FieldBoundaries<TDate, TSection>) => TDate;
    setSectionValueOnSections: (boundaries: FieldBoundaries<TDate, TSection>) => string;
}
export declare const useFieldState: <TValue, TDate, TSection extends FieldSection, TForwardedProps extends UseFieldForwardedProps, TInternalProps extends UseFieldInternalProps<any, any>>(params: UseFieldParams<TValue, TDate, TSection, TForwardedProps, TInternalProps>) => {
    state: UseFieldState<TValue, TSection>;
    selectedSectionIndexes: FieldSelectedSectionsIndexes | null;
    setSelectedSections: (newSelectedSections: FieldSelectedSections) => void;
    clearValue: () => void;
    clearActiveSection: () => void;
    updateSectionValue: ({ activeSection, setSectionValueOnDate, setSectionValueOnSections, }: UpdateSectionValueParams<TDate, TSection>) => void;
    updateValueFromValueStr: (valueStr: string) => void;
    setTempAndroidValueStr: (tempValueStrAndroid: string) => void;
    sectionOrder: import("./useField.types").SectionOrdering;
};
export {};
