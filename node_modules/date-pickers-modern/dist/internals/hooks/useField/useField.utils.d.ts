import { FieldSection, AvailableAdjustKeyCode, FieldBoundaries, SectionOrdering } from './useField.types';
import { MuiPickersAdapter, MuiDateSectionName } from '../../models';
import { PickersLocaleText } from '../../../locales/utils/pickersLocaleTextApi';
export declare const getDateSectionConfigFromFormatToken: <TDate>(utils: MuiPickersAdapter<TDate>, formatToken: string) => Pick<FieldSection, 'dateSectionName' | 'contentType'>;
export declare const adjustDateSectionValue: <TDate>(utils: MuiPickersAdapter<TDate>, date: TDate, dateSectionName: MuiDateSectionName, keyCode: AvailableAdjustKeyCode) => TDate;
export declare const adjustInvalidDateSectionValue: <TDate, TSection extends FieldSection>(utils: MuiPickersAdapter<TDate>, section: TSection, keyCode: AvailableAdjustKeyCode) => string;
export declare const getSectionVisibleValue: (section: Omit<FieldSection, 'start' | 'end' | 'startInInput' | 'endInInput'>, willBeRenderedInInput: boolean) => string;
export declare const cleanString: (dirtyString: string) => string;
export declare const addPositionPropertiesToSections: <TSection extends FieldSection>(sections: Omit<TSection, "start" | "end" | "startInInput" | "endInInput">[]) => TSection[];
export declare const splitFormatIntoSections: <TDate>(utils: MuiPickersAdapter<TDate>, localeText: PickersLocaleText<TDate>, format: string, date: TDate | null) => Omit<FieldSection, "start" | "end" | "startInInput" | "endInInput">[];
/**
 * Some date libraries like `dayjs` don't support parsing from date with escaped characters.
 * To make sure that the parsing works, we are building a format and a date without any separator.
 */
export declare const getDateFromDateSections: <TDate>(utils: MuiPickersAdapter<TDate>, sections: FieldSection[]) => TDate | null;
export declare const createDateStrForInputFromSections: (sections: FieldSection[]) => string;
export declare const getMonthsMatchingQuery: <TDate, TSection extends FieldSection>(utils: MuiPickersAdapter<TDate>, section: TSection, query: string) => string[];
export declare const getSectionBoundaries: <TDate, TSection extends FieldSection>(utils: MuiPickersAdapter<TDate>) => FieldBoundaries<TDate, TSection>;
export declare const applySectionValueToDate: <TDate>({ utils, dateSectionName, date, getNumericSectionValue, getMeridiemSectionValue, }: {
    utils: MuiPickersAdapter<TDate>;
    dateSectionName: MuiDateSectionName;
    date: TDate;
    getNumericSectionValue: (getter: (date: TDate) => number) => number;
    getMeridiemSectionValue: () => string;
}) => TDate;
export declare const cleanTrailingZeroInNumericSectionValue: (value: string, maximum: number) => string;
export declare const validateSections: <TSection extends FieldSection>(sections: TSection[], supportedSections: MuiDateSectionName[]) => void;
export declare const mergeDateIntoReferenceDate: <TDate, TSection extends Omit<FieldSection, "start" | "end" | "startInInput" | "endInInput">>(utils: MuiPickersAdapter<TDate>, date: TDate, sections: TSection[], referenceDate: TDate, shouldLimitToEditedSections: boolean) => TDate;
export declare const isAndroid: () => boolean;
export declare const clampDaySection: <TDate, TSection extends FieldSection>(utils: MuiPickersAdapter<TDate>, sections: TSection[], boundaries: FieldBoundaries<TDate, TSection>) => TSection[] | null;
export declare const getSectionOrder: (sections: Omit<FieldSection, 'start' | 'end' | 'startInInput' | 'endInInput'>[], isRTL: boolean) => SectionOrdering;
