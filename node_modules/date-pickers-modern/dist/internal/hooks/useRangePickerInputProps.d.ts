import * as React from 'react';
import { PickersInputLocaleText } from "../../locales";
import { DateOrTimeView, UsePickerResponse, WrapperVariant } from '../../internals';
import { DateRange, RangePosition } from '../models';
interface UseRangePickerFieldParams<TDate, TView extends DateOrTimeView> extends Pick<UsePickerResponse<DateRange<TDate>, TView, any>, 'open' | 'actions'> {
    wrapperVariant: WrapperVariant;
    readOnly?: boolean;
    disabled?: boolean;
    disableOpenPicker?: boolean;
    onBlur?: () => void;
    rangePosition: RangePosition;
    onRangePositionChange: (newPosition: RangePosition) => void;
    localeText: PickersInputLocaleText<TDate> | undefined;
}
export declare const useRangePickerInputProps: <TDate, TView extends DateOrTimeView>({ wrapperVariant, open, actions, readOnly, disabled, disableOpenPicker, onBlur, rangePosition, onRangePositionChange, localeText: inLocaleText, }: UseRangePickerFieldParams<TDate, TView>) => {
    startInput: {
        readOnly: boolean;
        disabled: boolean | undefined;
        onClick?: ((event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void) | undefined;
        inputRef: React.RefObject<HTMLInputElement>;
        label: string;
        onKeyDown: (event: React.KeyboardEvent<Element>) => void;
        onFocus: () => void;
        focused: boolean | undefined;
    };
    endInput: {
        readOnly: boolean;
        disabled: boolean | undefined;
        onClick?: ((event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void) | undefined;
        inputRef: React.RefObject<HTMLInputElement>;
        label: string;
        onKeyDown: (event: React.KeyboardEvent<Element>) => void;
        onFocus: () => void;
        focused: boolean | undefined;
    };
    root: {
        onBlur: (() => void) | undefined;
    };
};
export {};
