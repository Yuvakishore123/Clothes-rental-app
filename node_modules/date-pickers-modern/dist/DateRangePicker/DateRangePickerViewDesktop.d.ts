import * as React from 'react';
import { SlotComponentProps } from '@mui/base/utils';
import { DayCalendarProps, DayValidationProps, ExportedPickersArrowSwitcherProps, PickersArrowSwitcherSlotsComponent, PickersArrowSwitcherSlotsComponentsProps, DayCalendarSlotsComponent, DayCalendarSlotsComponentsProps, ExportedUseViewsOptions, DateView } from '../internals';
import { DateRange, RangePosition } from '../internal/models/range';
import { DateRangePickerDay, DateRangePickerDayProps } from '../DateRangePickerDay';
import { DateRangePickerViewDesktopClasses } from './dateRangePickerViewDesktopClasses';
import { SlideDirection } from "../DateCalendar/PickersSlideTransition";
export interface ExportedDateRangePickerViewDesktopProps {
    /**
     * The number of calendars that render on **desktop**.
     * @default 2
     */
    calendars?: 1 | 2 | 3;
}
export interface DesktopDateRangeCalendarSlotsComponent<TDate> extends PickersArrowSwitcherSlotsComponent, Omit<DayCalendarSlotsComponent<TDate>, 'Day'> {
    /**
     * Custom component for day in range pickers.
     * Check the [DateRangePickersDay](https://mui.com/x/api/date-pickers/date-range-picker-day/) component.
     * @default DateRangePickersDay
     */
    Day?: React.ElementType<DateRangePickerDayProps<TDate>>;
}
export interface DesktopDateRangeCalendarSlotsComponentsProps<TDate> extends PickersArrowSwitcherSlotsComponentsProps, Omit<DayCalendarSlotsComponentsProps<TDate>, 'day'> {
    day?: SlotComponentProps<typeof DateRangePickerDay, {}, DayCalendarProps<TDate> & {
        day: TDate;
    }>;
}
interface ChangeMonthPayload<TDate> {
    direction: SlideDirection;
    newMonth: TDate;
}
export interface DateRangePickerViewDesktopProps<TDate> extends ExportedDateRangePickerViewDesktopProps, Omit<DayCalendarProps<TDate>, 'selectedDays' | 'onFocusedDayChange' | 'classes' | 'components' | 'componentsProps'>, DayValidationProps<TDate>, ExportedPickersArrowSwitcherProps, Pick<ExportedUseViewsOptions<DateView>, 'view' | 'views' | 'openTo' | 'onViewChange' | 'focusedView'> {
    /**
     * Overrideable components.
     * @default {}
     */
    components?: DesktopDateRangeCalendarSlotsComponent<TDate>;
    /**
     * The props used for each component slot.
     * @default {}
     */
    componentsProps?: DesktopDateRangeCalendarSlotsComponentsProps<TDate>;
    calendars: 1 | 2 | 3;
    value: DateRange<TDate>;
    changeMonth: (date: TDate) => void;
    onYearChange?: (date: TDate) => void;
    isDateDisabled?: (day: (TDate | null)) => boolean;
    handleChangeMonth?: (payload: ChangeMonthPayload<TDate>) => void;
    views: DateView[];
    /**
     * If `true`, today's date is rendering without highlighting with circle.
     * @default false
     */
    disableHighlightToday?: boolean;
    /**
     * Make picker read only.
     * @default false
     */
    readOnly?: boolean;
    changeFocusedDay: (newFocusedDate: (TDate | null), withoutMonthSwitchingAnimation?: (boolean | undefined)) => void;
    /**
     * Callback firing on month change @DateIOType.
     * @template TDate
     * @param {TDate} month The new month.
     * @returns {void|Promise} -
     */
    onMonthChange?: (month: TDate) => void | Promise<void>;
    onFocusedViewChangedIn?: (view: DateView, hasFocus: boolean) => void;
    setCurrentView: (newValue: (DateView | ((prevValue: DateView) => DateView))) => void;
    rangePosition: RangePosition;
    classes?: Partial<DateRangePickerViewDesktopClasses>;
}
/**
 * @ignore - internal component.
 */
export declare function DateRangePickerViewDesktop<TDate>(inProps: DateRangePickerViewDesktopProps<TDate>): JSX.Element;
export {};
