import * as React from 'react';
import { ExportedDateCalendarProps, PickerStatePickerProps, BaseDateValidationProps, DayValidationProps, ExportedBaseToolbarProps, ExportedUseViewsOptions, DateView } from '../internals';
import { DateRange, RangePositionProps } from '../internal/models/range';
import { DayRangeValidationProps } from '../internal/models/dateRange';
import { DateRangePickerViewMobileSlotsComponent, DateRangePickerViewMobileSlotsComponentsProps } from './DateRangePickerViewMobile';
import { DateRangePickerInputProps } from './DateRangePickerInput';
import { ExportedDateRangePickerViewDesktopProps } from './DateRangePickerViewDesktop';
import { DateRangePickerToolbarProps } from './DateRangePickerToolbar';
export interface DateRangePickerViewSlotsComponent<TDate> extends DateRangePickerViewMobileSlotsComponent<TDate> {
    /**
     * Custom component for the toolbar rendered above the views.
     * @default DateRangePickerToolbar
     */
    Toolbar?: React.JSXElementConstructor<DateRangePickerToolbarProps<TDate>>;
}
export interface DateRangePickerViewSlotsComponentsProps<TDate> extends DateRangePickerViewMobileSlotsComponentsProps<TDate> {
    toolbar?: ExportedBaseToolbarProps;
}
export interface ExportedDateRangePickerViewProps<TDate> extends ExportedDateRangePickerViewDesktopProps, DayRangeValidationProps<TDate>, Omit<ExportedDateCalendarProps<TDate>, 'value' | 'defaultValue' | 'onChange' | 'onYearChange' | keyof BaseDateValidationProps<TDate> | keyof DayValidationProps<TDate>>, ExportedUseViewsOptions<DateView> {
    /**
     * Overrideable components.
     * @default {}
     */
    components?: DateRangePickerViewSlotsComponent<TDate>;
    /**
     * The props used for each component slot.
     * @default {}
     */
    componentsProps?: DateRangePickerViewSlotsComponentsProps<TDate>;
    /**
     * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.
     * @default false
     */
    disableAutoMonthSwitching?: boolean;
    /**
     * If `true`, show the toolbar even in desktop mode.
     */
    showToolbar?: boolean;
    /**
     * className applied to the root component.
     */
    className?: string;
}
interface DateRangePickerViewProps<TDate> extends RangePositionProps, ExportedDateRangePickerViewProps<TDate>, PickerStatePickerProps<DateRange<TDate>>, Required<BaseDateValidationProps<TDate>> {
    calendars: 1 | 2 | 3;
    open: boolean;
    DateInputProps: DateRangePickerInputProps<TDate>;
    onYearChange?: (year: TDate) => void;
    /**
     * Make picker read only.
     * @default false
     */
    readOnly?: boolean;
    views: DateView[];
}
type DateRangePickerViewComponent = (<TDate>(props: DateRangePickerViewProps<TDate>) => JSX.Element) & {
    propTypes?: any;
};
export declare const DateRangePickerView: DateRangePickerViewComponent;
export {};
